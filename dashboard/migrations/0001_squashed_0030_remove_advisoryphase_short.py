# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-12-11 17:02
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('dashboard', '0001_initial'), ('dashboard', '0002_secondaryrole'), ('dashboard', '0003_secondaryrole_short_name'), ('dashboard', '0004_member_secondary_role'), ('dashboard', '0005_auto_20161209_1355'), ('dashboard', '0006_auto_20161209_1727'), ('dashboard', '0007_auto_20161209_1730'), ('dashboard', '0008_auto_20161209_1730'), ('dashboard', '0009_auto_20161209_1732'), ('dashboard', '0010_teamstatus'), ('dashboard', '0011_auto_20161209_2249'), ('dashboard', '0012_auto_20161210_1033'), ('dashboard', '0013_auto_20161210_1035'), ('dashboard', '0014_auto_20161210_1200'), ('dashboard', '0015_auto_20161210_1206'), ('dashboard', '0016_auto_20161210_1212'), ('dashboard', '0017_auto_20161210_1452'), ('dashboard', '0018_auto_20161210_1559'), ('dashboard', '0019_auto_20161210_1611'), ('dashboard', '0020_auto_20161210_1816'), ('dashboard', '0021_weekwarning_rating_red_warning'), ('dashboard', '0022_auto_20161211_1103'), ('dashboard', '0023_auto_20161211_1418'), ('dashboard', '0024_auto_20161211_1420'), ('dashboard', '0025_auto_20161211_1621'), ('dashboard', '0026_auto_20161211_1636'), ('dashboard', '0027_auto_20161211_1755'), ('dashboard', '0028_auto_20161211_1856'), ('dashboard', '0029_advisoryphase_short'), ('dashboard', '0030_remove_advisoryphase_short')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdvisoryPhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phase', models.CharField(max_length=200, verbose_name='Phases')),
                ('reached_in_week', models.IntegerField(verbose_name='Reached in Week')),
                ('expected_calls', models.IntegerField(verbose_name='Expected calls')),
            ],
        ),
        migrations.CreateModel(
            name='ConsultantSurvey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submit_date', models.DateTimeField(auto_now_add=True, verbose_name='Submit date')),
                ('call_date', models.DateField(verbose_name='Call date')),
                ('all_prepared', models.BooleanField(verbose_name='All participants prepared for call?')),
                ('topic_discussed', models.CharField(max_length=200, verbose_name='Topic Discussed')),
                ('help', models.CharField(blank=True, max_length=3000, verbose_name='Ashoka team should help with')),
                ('phase_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='How is the advisory phase going?')),
                ('other_comments', models.CharField(blank=True, max_length=3000, verbose_name='Any other comments?')),
                ('document_link', models.URLField(blank=True, verbose_name='Link to current document')),
                ('current_phase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surveys', to='dashboard.AdvisoryPhase')),
            ],
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Dashboard Name')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Dashboard Create Date')),
                ('advisory_start_date', models.DateField(verbose_name='Start date of Advisory Process')),
                ('advisory_end_date', models.DateField(verbose_name='End date of Advisory Process')),
            ],
            options={
                'verbose_name_plural': 'Dashboards',
                'verbose_name': 'Dashboard',
            },
        ),
        migrations.CreateModel(
            name='FellowSurvey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submit_date', models.DateTimeField(auto_now_add=True, verbose_name='Submit date')),
                ('phase_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='How is the advisory phase going?')),
                ('comments', models.CharField(blank=True, max_length=3000, verbose_name='Any other comments?')),
                ('other_help', models.CharField(blank=True, max_length=3000, verbose_name='Any other Ashoka should help with?')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('email', models.CharField(max_length=200, verbose_name='Email')),
                ('receives_survey_reminder_emails', models.BooleanField(verbose_name='Receives reminder emails?')),
                ('comment', models.CharField(blank=True, max_length=4000, verbose_name='comment')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=3, verbose_name='Short Name')),
                ('long_name', models.CharField(max_length=18, verbose_name='Role')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Team Name')),
                ('lrp_comment', models.TextField(blank=True, verbose_name='LRP Comment')),
                ('status', models.CharField(choices=[('RED', 'Major issues!!!'), ('YELLOW', 'Some minor issues!'), ('GREEN', 'All good!')], default='GREEN', max_length=7, verbose_name='Team Status')),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='dashboard.Dashboard')),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role', to='dashboard.Role'),
        ),
        migrations.AddField(
            model_name='member',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='dashboard.Team'),
        ),
        migrations.AddField(
            model_name='fellowsurvey',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fellow_surveys', to='dashboard.Team'),
        ),
        migrations.AddField(
            model_name='consultantsurvey',
            name='missing_member',
            field=models.ManyToManyField(blank=True, related_name='surveys', to='dashboard.Member'),
        ),
        migrations.AddField(
            model_name='consultantsurvey',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultant_surveys', to='dashboard.Team'),
        ),
        migrations.CreateModel(
            name='SecondaryRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=200, verbose_name='Role')),
                ('short_name', models.CharField(max_length=100, verbose_name='Short Name')),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='secondary_role',
            field=models.ManyToManyField(related_name='secondary_role', to='dashboard.SecondaryRole'),
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('message', models.TextField(help_text="If you wish to include the url to consultant form in the email, please add 'FORM_URL' (without quotes) placeholder. It will be replaced by the actual consultant url in the email.", verbose_name='Body of the Email')),
                ('type', models.CharField(choices=[('IM', 'Instruction Mail'), ('RM', 'Reminder Mail')], help_text='Type of the template. Currently Instruction Email template and Reminder Email template are supported.', max_length=5, verbose_name='Type')),
                ('default_template', models.BooleanField(default=False, help_text='If this field is set to ON all the emails of the specified type will use this template. Each type of email can have only one default', verbose_name='Default')),
                ('name', models.CharField(help_text='Template name to uniquely identify it.', max_length=200, unique=True, verbose_name='Name')),
            ],
        ),
        migrations.AlterField(
            model_name='consultantsurvey',
            name='help',
            field=models.TextField(blank=True, verbose_name='Ashoka team should help with'),
        ),
        migrations.AlterField(
            model_name='consultantsurvey',
            name='other_comments',
            field=models.TextField(blank=True, verbose_name='Any other comments?'),
        ),
        migrations.AlterField(
            model_name='fellowsurvey',
            name='comments',
            field=models.TextField(blank=True, verbose_name='Any other comments?'),
        ),
        migrations.AlterField(
            model_name='fellowsurvey',
            name='other_help',
            field=models.TextField(blank=True, verbose_name='Any other Ashoka should help with?'),
        ),
        migrations.AlterField(
            model_name='member',
            name='comment',
            field=models.TextField(blank=True, verbose_name='comment'),
        ),
        migrations.CreateModel(
            name='TeamStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_change_count', models.IntegerField(default=0, help_text='This value will be added to total calls count.', verbose_name='Add/Subtract Total Calls count')),
                ('automatic_reminder', models.BooleanField(default=True, help_text='Should periodic Automatic Reminders Emails be sent?', verbose_name='Send Automatic Reminders?')),
                ('last_automatic_reminder', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Last automatic reminder sent on')),
                ('kick_off', models.CharField(choices=[('NS', 'Not Started'), ('IMS', 'Intro Mail Sent'), ('DA', 'Date Arranged'), ('CH', 'Call Happened')], default='NS', max_length=5, verbose_name='Kick Off Status')),
                ('kick_off_comment', models.TextField(blank=True, verbose_name='Kick Off Comment')),
                ('mid_term', models.CharField(choices=[('NS', 'Not Started'), ('IMS', 'Intro Mail Sent'), ('DA', 'Date Arranged'), ('CH', 'Call Happened')], default='NS', max_length=5, verbose_name='Mid Term Status')),
                ('mid_term_comment', models.TextField(blank=True, verbose_name='Mid Term Comment')),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='team_status', to='dashboard.Team')),
            ],
        ),
        migrations.CreateModel(
            name='WeekWarning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_number', models.PositiveIntegerField(unique=True, verbose_name='Week Number')),
                ('calls_y', models.PositiveIntegerField(help_text='Number of calls less than this value leads to Yellow warning.', verbose_name='Call count - Yellow warning')),
                ('calls_r', models.PositiveIntegerField(help_text='Number of calls less than this value leads to Red warning (Should be less than yellow warning call count) ', verbose_name='Call count - Red warning')),
                ('member_call_y', models.PositiveIntegerField(help_text='Person missing calls: > leads to Yellow warning', verbose_name='Member missing call count - Yellow warning')),
                ('member_call_r', models.PositiveIntegerField(help_text='Person missing calls: > leads to Red warning (Should be greater than yellow warning member call count) ', verbose_name='Member missing call count - Red warning')),
                ('kick_off_y', models.BooleanField(help_text='Kick-off not happened in this week leads to Yellow warning.', verbose_name='Kick Off - Yellow warning')),
                ('kick_off_r', models.BooleanField(help_text='Kick-off not happened in this week leads to Red warning.', verbose_name='Kick Off - Red warning')),
                ('mid_term_y', models.BooleanField(help_text='Mid-term not happened in this week leads to Yellow warning', verbose_name='Mid Term - Yellow warning')),
                ('mid_term_r', models.BooleanField(help_text='Mid-term not happened in this week leads to Red warning', verbose_name='Mid Term - Red warning')),
                ('phase', models.ForeignKey(help_text='Phases: Progress expected', on_delete=django.db.models.deletion.CASCADE, related_name='expected_phase', to='dashboard.AdvisoryPhase')),
                ('phase_r', models.ForeignKey(blank=True, help_text='Red warning if in less than this Phase', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='red_warning_phase', to='dashboard.AdvisoryPhase')),
                ('phase_y', models.ForeignKey(blank=True, help_text='Yellow warning if in this Phase', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='yellow_warning_phase', to='dashboard.AdvisoryPhase')),
                ('unprepared_calls_r', models.IntegerField(default='30', help_text='If percentage of unprepared calls is less than this threshold, Red warning will be raised. ', verbose_name='% unprepared call threshold')),
                ('unprepared_calls_y', models.IntegerField(default='50', help_text='If percentage of unprepared calls is less than this threshold, Yellow warning will be raised. ', verbose_name='% unprepared call threshold')),
                ('consultant_rating_r', models.PositiveIntegerField(default=7, help_text='Red warning if last rating by consultant is less than this value ', verbose_name='Consultant Rating Red Warning')),
                ('fellow_rating_r', models.PositiveIntegerField(default=7, help_text='Red warning if last rating by fellow is less than this value ', verbose_name='Fellow Phase Rating Red Warning')),
            ],
        ),
        migrations.RemoveField(
            model_name='advisoryphase',
            name='expected_calls',
        ),
        migrations.RemoveField(
            model_name='advisoryphase',
            name='reached_in_week',
        ),
        migrations.AddField(
            model_name='advisoryphase',
            name='phase_number',
            field=models.PositiveIntegerField(help_text="Phase are sorted according to this number. If phase 'A' should happen before phase 'B' then 'A' should have lower phase number value than 'B'.", unique=True, verbose_name='Phase number'),
        ),
        migrations.CreateModel(
            name='TeamWarning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_count', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Call Count')),
                ('phase', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Phase')),
                ('kick_off', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Kick Off')),
                ('mid_term', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Mid Term')),
                ('unprepared_call', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Unprepared Calls')),
                ('consultant_rating', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Consultant Rating')),
                ('fellow_rating', models.CharField(choices=[('G', 'Green'), ('Y', 'Yellow'), ('R', 'Red')], default='G', max_length=3, verbose_name='Warning - Fellow Rating')),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='warnings', to='dashboard.Team')),
                ('call_count_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Call Count')),
                ('consultant_rating_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Consultant Rating')),
                ('fellow_rating_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Fellow Rating')),
                ('kick_off_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Kick Off')),
                ('mid_term_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Mid Term')),
                ('phase_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Phase')),
                ('unprepared_call_comment', models.CharField(blank=True, max_length=300, verbose_name='Comment - Unprepared Calls')),
            ],
        ),
        migrations.AlterField(
            model_name='advisoryphase',
            name='phase',
            field=models.CharField(max_length=200, verbose_name='Phase'),
        ),
        migrations.RenameField(
            model_name='consultantsurvey',
            old_name='phase_rating',
            new_name='rating',
        ),
        migrations.RenameField(
            model_name='fellowsurvey',
            old_name='phase_rating',
            new_name='rating',
        ),
    ]
